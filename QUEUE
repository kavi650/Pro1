// Java Program to Implement Queue using an Array

class Queue {
    private int front, rear, capacity;
    private int[] queue;

    // Constructor to initialize the queue
    public Queue(int capacity) {
        this.capacity = capacity;
        queue = new int[capacity];
        front = 0;
        rear = 0;
    }

    // Method to add an element to the queue
    public void enqueue(int item) {
        if (rear == capacity) {
            System.out.println("Queue is full");
        } else {
            queue[rear] = item;
            rear++;
            System.out.println(item + " added to the queue");
        }
    }

    // Method to remove an element from the queue
    public void dequeue() {
        if (front == rear) {
            System.out.println("Queue is empty");
        } else {
            System.out.println(queue[front] + " removed from the queue");
            front++;
        }
    }

    // Method to display the elements in the queue
    public void display() {
        if (front == rear) {
            System.out.println("Queue is empty");
        } else {
            System.out.print("Queue: ");
            for (int i = front; i < rear; i++) {
                System.out.print(queue[i] + " ");
            }
            System.out.println();
        }
    }

    // Main method to test the queue
    public static void main(String[] args) {
        Queue q = new Queue(5); // Create a queue with capacity 5

        // Enqueue elements
        q.enqueue(10);
        q.enqueue(20);
        q.enqueue(30);

        // Display the queue
        q.display();

        // Dequeue an element
        q.dequeue();

        // Display the queue again
        q.display();

        // Enqueue more elements
        q.enqueue(40);
        q.enqueue(50);
        q.enqueue(60); // This will show queue is full
        q.enqueue(70);

        // Final display of the queue
        q.display();
    }
}

import java.util.LinkedList;
import java.util.Queue;

public class SimpleQueue {
    public static void main(String[] args) {
        // Create a queue using LinkedList
        Queue<Integer> queue = new LinkedList<>();

        // Enqueue elements
        queue.offer(10);
        queue.offer(20);
        queue.offer(30);

        // Display the queue
        System.out.println("Queue after enqueue operations: " + queue);

        // Dequeue an element
        System.out.println("Dequeued element: " + queue.poll());

        // Display the queue after dequeue
        System.out.println("Queue after dequeue operation: " + queue);

        // Enqueue more elements
        queue.offer(40);
        queue.offer(50);

        // Display the final queue
        System.out.println("Queue after more enqueue operations: " + queue);
    }
}
